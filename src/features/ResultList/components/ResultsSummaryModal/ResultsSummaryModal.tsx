import { FC, useCallback, useMemo } from "react";
import styles from "./ResultsSummaryModal.module.scss";
import Modal from "@/features/Common/components/Modal/Modal";
import LoadingBar from "@/features/Common/components/LoadingBar/LoadingBar";
import Tooltip from "@/features/Common/components/Tooltip/Tooltip";
import { ResultContextObject } from "@/features/ResultList/utils/llm";
import { Link } from "react-router-dom";
import loadingIcon from '@/assets/images/loading/loading-purple.png';
import Feedback from '@/assets/icons/navigation/Feedback.svg?react';

interface ResultsSummaryModalProps {
  handleResultMatchClick: Function;
  isError?: boolean;
  isOpen?: boolean;
  isSummaryLoading: boolean;
  onClose?: Function;
  pk: string;
  resultContext: ResultContextObject[];
  streamedText: string;
}

const ResultsSummaryModal: FC<ResultsSummaryModalProps> = ({
  handleResultMatchClick,
  isError = false,
  isOpen = false,
  isSummaryLoading,
  onClose = ()=>{},
  pk,
  streamedText,
  resultContext
}) => {

  const startOpen = (isOpen === undefined) ? false : isOpen;

  const handleMatchedNameClick = useCallback((match: ResultContextObject) => {
    handleResultMatchClick(match);
  }, [handleResultMatchClick]);

  const processedText = useMemo(() => {
    const names = resultContext.map((contextItem) => contextItem.name).join("|");
    const regex = new RegExp(`\\b(${names})\\b`, "gi");
    const paragraphs = streamedText.split("\n");

    return paragraphs.map((paragraph, paraIndex) => {
      const isLastParagraph = (paraIndex === paragraphs.length - 1);
      const processedParagraph = paragraph.split(regex).map((part, index) => {
        const match = resultContext.find((contextItem) => !!part && contextItem.name.toLowerCase() === part.toLowerCase());
        if (match) {
          return (
            <span
              key={`${paraIndex}-${index}`}
              onClick={() => handleMatchedNameClick(match)}
              className={styles.summaryMatch}
              data-tooltip-id={`${paraIndex}-${index}`}
            >
              <Tooltip id={`${paraIndex}-${index}`}><span>View this result</span></Tooltip>
              {match.name}
            </span>
          );
        }
        return part;
      });

      if(paragraph.length <= 0)
        return null;

      return (
        <p key={paraIndex}>
          {processedParagraph}
          {isLastParagraph && isSummaryLoading && !!streamedText && <span className={styles.cursor}>|</span>}
        </p>
      );
    });
  }, [streamedText, resultContext, handleMatchedNameClick, isSummaryLoading]);


  const handleClose = () => {
    onClose();
  }

  return (
    <Modal 
      isOpen={startOpen} 
      onClose={handleClose} 
      className={styles.summaryModal}
      containerClass={styles.summaryModalContainer}
      >
        <LoadingBar
          useIcon
          loadingText="Summarizing Results"
          disclaimerText={
            <>
              <p>This AI-generated summary reviews the data returned by Translator and identifies interesting results found in paths from within the top 50 results.</p>
              <p>A new summary is generated each time the results are filtered.</p>
            </>
          }
          className={`${styles.loadingArea} ${isSummaryLoading && !streamedText ? styles.active : ""}`}
        />
        <div className={styles.top}>
          <h5 className={styles.heading}>Results Summary</h5>
          <p className={styles.statusText}>Generated by AI</p>
        </div>
        <div className={`scrollable ${styles.bottom}`}>
          { isError
            ? <p>An issue occurred when generating your summary, please try again later.</p>
            : <>{processedText}</>
          }
          {
            isSummaryLoading && !!streamedText && 
            <img src={loadingIcon} className={`${styles.summaryLoadingIcon} loadingIcon`} alt="loading icon"/>
          }
          {
            !isSummaryLoading &&
            <div className={styles.linkContainer}>
              <Link to={`/send-feedback?q=${pk}`} className={styles.sendFeedbackLink} reloadDocument target={'_blank'}><Feedback/><span className={styles.linkSpan}>Send Feedback</span></Link>
            </div>
          }
        </div>
    </Modal>
  );
}


export default ResultsSummaryModal;

