import { FC } from "react";
import styles from "./ResultsSummaryModal.module.scss";
import Modal from "./Modal";
import LoadingBar from "../LoadingBar/LoadingBar";

interface ResultsSummaryModalProps {
  isOpen?: boolean;
  isSummaryAvailable: boolean;
  isSummaryLoading: boolean;
  onClose?: Function;
  streamedText: string;
}

const ResultsSummaryModal: FC<ResultsSummaryModalProps> = ({isOpen = false, isSummaryAvailable, isSummaryLoading, onClose = ()=>{}, streamedText}) => {

  const startOpen = (isOpen === undefined) ? false : isOpen;

  const handleClose = () => {
    onClose();
  }

  return (
    <Modal 
      isOpen={startOpen} 
      onClose={handleClose} 
      className={styles.summaryModal}
      containerClass={styles.summaryModalContainer}
      >
        <div className={styles.top}>
          <h5 className={styles.heading}>Results Summary</h5>
          <p className={styles.statusText}>Generated by AI:</p>
        </div>
        <div className={styles.bottom}>
          <div className={`scrollable`}>
            <LoadingBar
              useIcon
              loadingText="Summarizing Results"
              disclaimerText={<p>Your summary is currently being generated.</p>}
              className={`${styles.loadingArea} ${isSummaryLoading && !streamedText ? styles.active : ""}`}
            />
            {
              !!streamedText && 
              streamedText.split('\n').map((line, index) => {
                return <p key={index}>{line}</p>
              }) 
            }
          </div>
        </div>
    </Modal>
  );
}


export default ResultsSummaryModal;

